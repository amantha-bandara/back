E25sLViBR-mNoS2aG3OsPQ
3yYT_l5FS1a64jiho6VigQ
AXjDcG10mWIMRIp5OHAeNP7s8t1vbfjE

sc =t =73Cvpda5SYaAm8cXm2MuYA



import os
import pickle
import base64
from flask import Flask, render_template
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from email.mime.text import MIMEText
import google.auth
from googleapiclient.errors import HttpError

app = Flask(__name__)

# If modifying, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly', 'https://www.googleapis.com/auth/gmail.send']

# Spreadsheet and Sheet information
SPREADSHEET_ID = 'your_google_sheet_id_here'
RANGE_NAME = 'Sheet1!A2:C'  # Adjust based on your Google Sheet layout

# Setup Google API credentials
def authenticate_google_account():
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)

        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    return creds

def get_attendance_data():
    creds = authenticate_google_account()
    try:
        service = build('sheets', 'v4', credentials=creds)
        sheet = service.spreadsheets()
        result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
        values = result.get('values', [])
        return values
    except HttpError as err:
        print(f"An error occurred: {err}")
        return []

def send_email(student_email):
    creds = authenticate_google_account()
    try:
        service = build('gmail', 'v1', credentials=creds)
        message = service.users().messages().send(
            userId='me', body={
                'raw': create_message('me', student_email, 'Attendance Reminder', 'Please attend the next class!')}).execute()
    except HttpError as error:
        print(f'An error occurred: {error}')

def create_message(sender, to, subject, message_text):
    message = MIMEText(message_text)
    message['to'] = to
    message['from'] = sender
    message['subject'] = subject
    raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
    return {'raw': raw_message}

@app.route('/')
def index():
    attendance_data = get_attendance_data()
    for row in attendance_data:
        if len(row) >= 3:
            name, email, status = row
            if status.lower() == 'absent':
                send_email(email)
    return 'Attendance checked and emails sent!'

if __name__ == '__main__':
    app.run(debug=True)
